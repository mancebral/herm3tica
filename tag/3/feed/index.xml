<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>3 &#8211; herm3TICa</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Cámaras, sensores y telepresencia</description>
	<lastBuildDate>Sun, 08 Feb 2015 21:49:04 +0000</lastBuildDate>
	<language>es</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Dibujando la alfombra de Sierpinski (Shaders y FBO)</title>
		<link>./../../../dibujando-la-alfombra-de-sierpinski-shaders-y-fbo/index.html</link>
					<comments>./../../../dibujando-la-alfombra-de-sierpinski-shaders-y-fbo/index.html#respond</comments>
		
		<dc:creator><![CDATA[Horacio]]></dc:creator>
		<pubDate>Sun, 08 Feb 2015 21:46:51 +0000</pubDate>
				<category><![CDATA[Alfombra de Sierpinski]]></category>
		<category><![CDATA[Investigación]]></category>
		<category><![CDATA[Máquina Abstracta]]></category>
		<category><![CDATA[OpenFrameworks]]></category>
		<category><![CDATA[Tech]]></category>
		<category><![CDATA[3]]></category>
		<category><![CDATA[alpha]]></category>
		<category><![CDATA[fbo]]></category>
		<category><![CDATA[fundamentos]]></category>
		<category><![CDATA[interpolación]]></category>
		<category><![CDATA[módulo]]></category>
		<category><![CDATA[pixeles]]></category>
		<category><![CDATA[posición]]></category>
		<category><![CDATA[redimensionado]]></category>
		<category><![CDATA[shaders]]></category>
		<category><![CDATA[sierpinski]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1133</guid>

					<description><![CDATA[El método que hemos escogido para dibujar la alfombra de Sierpinski en el artículo anterior es muy poco eficiente, la aplicación que lo utiliza, SierpinskiGreyScale, funciona a nueve fotogramas por segundo en mi ordenador. El programa necesita recorrer la matriz de 729 x 729, de la forma en que explicamos, dos veces; una primera vez [...]]]></description>
										<content:encoded><![CDATA[<p style="text-align: justify;"><span style="color: #4c4c4c;">El método que hemos escogido para dibujar la alfombra de Sierpinski en el <a href="./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/index.html">artículo anterior</a> es muy poco eficiente, la aplicación que lo utiliza, <a title="SierpinskiGreyScale - Github Alg-a" href="https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiGreyScale" target="_blank">SierpinskiGreyScale</a>, funciona a nueve fotogramas por segundo en mi ordenador. El programa necesita recorrer la matriz de 729 x 729, de la forma en que explicamos, dos veces; una primera vez para sumar los valores de todos los pixeles que están en los cuadrados centrales y una segunda vez para calcular la media de todos los valores sumados dividiendo el resultado por el número de pixeles de cada cuadrado, almacenar la media como escala de grises en las áreas sensibles y crear una textura que muestre el resultado.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski-shaders_00.png"><img decoding="async" class="alignnone wp-image-1134 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski-shaders_00.png" alt="sierpinski-shaders_00" width="950" height="292" srcset="./../../../wp-content/uploads/2015/02/sierpinski-shaders_00.png 950w, ./../../../wp-content/uploads/2015/02/sierpinski-shaders_00-300x92.png 300w" sizes="(max-width: 950px) 100vw, 950px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">¿Podemos utilizar shaders o aprovechar la forma de trabajar con Frame Buffer Objects que sugerimos en el <a title="Redimensionando una imagen" href="./../../../redimensionando-una-imagen/index.html">segundo artículo</a>, con el fin de resolver de forma mas eficiente el problema?</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski-shaders_03.png"><img decoding="async" class="alignnone wp-image-1137 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski-shaders_03.png" alt="sierpinski-shaders_03" width="668" height="329" srcset="./../../../wp-content/uploads/2015/02/sierpinski-shaders_03.png 668w, ./../../../wp-content/uploads/2015/02/sierpinski-shaders_03-300x147.png 300w" sizes="(max-width: 668px) 100vw, 668px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Reconsideremos la naturaleza de lo que la alfombra de Sierpinski propone en cada nivel. Comenzamos partiendo de una imagen de 729 x729 que descompusimos en un cuadrado central y ocho zonas de 243 x 243 pixeles. Sin embargo, desde el punto de vista de la alfombra, lo único que necesitábamos era transformar la imagen original en una matriz de 3 x 3 pixeles y seleccionar el pixel central. Podemos realizar este trabajo de forma muy eficiente y con mucha facilidad redimensionando la imagen mediante un Frame Buffer Object.</span></p>
<pre style="font-size: .8em;">// declaración
OfFbo		fbo_1;
ofPixels    pixels_1;
ofTexture	texture_1;

...

// asignacion de memoria
fbo_1.allocate(5, 3, GL_RGB, 0);
texture_1.allocate(5, 3, GL_RGB);
texture_1.setTextureMinMagFilter(GL_NEAREST, GL_NEAREST);

...

fbo_1.begin();
ofClear(0, 0, 0, 255);
videoTexture.draw(0, 0, 3, 3);
fbo_1.end();
fbo_1.readToPixels(pixels_1);
texture_1.loadData(pixels_1.getPixels(), 5, 3, GL_RGB);</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Al hacerlo nos hemos encontrado con un extraño problema, trabajando con texturas y Frame Buffer Objects cuyo ancho era un múltiplo exacto de 3, la tarjeta gráfica del ordenador generaba extraños errores y fallos. Sin haber ocupado mucho tiempo en averiguar porqué sucede esto, para resolver el problema, hemos decidido utilizar anchos 2 pixeles más grandes de lo que necesitamos, por esta razón en el fragmento de código anterior la textura y el Frame Buffer Object tienen un tamaño de 5 x 3 pixeles.</span></p>
<pre style="font-size: .8em;">texture_1.setTextureMinMagFilter(GL_NEAREST, GL_NEAREST);</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">La clave de esta nueva estrategia que proponemos está en la sexta línea del código. La función setTextureMinMagFilter nos permite establecer la forma en que se renderizará la textura en la que almacenamos la matriz de 3 x 3 pixeles del primer nivel de la alfombra, de modo que mantenga su geometría aunque la mostremos en la pantalla a un tamaño de 729 x 729, debido al tipo de cálculo que se realizará para generar por interpolación los 531.441 pixeles que habrá en la pantalla para representar una textura que solamente tiene 9 pixeles, GL_NEAREST.</span></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">A continuación simplemente debemos realizar la misma operación para almacenar cada nivel de la alfombra en una textura del tamaño adecuado, 9 x 9, 27 x 27, 81 x 81 y 243 x 243.</span></p>
<pre style="font-size: .8em;">// declaración
OfFbo		fbo_2;
ofPixels    pixels_2;
ofTexture	texture_2;

...

// asignacion de memoria
fbo_2.allocate(11, 9, GL_RGB, 0);
texture_2.allocate(11, 9, GL_RGB);
texture_2.setTextureMinMagFilter(GL_NEAREST, GL_NEAREST);

...

fbo_2.begin();
ofClear(0, 0, 0, 255);
videoTexture.draw(0, 0, 9, 9);
fbo_2.end();
fbo_2.readToPixels(pixels_2);
texture_2.loadData(pixels_2.getPixels(), 11, 9, GL_RGB);

...</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">De hecho podemos simplificar muchísimo el código almacenando Frame Buffer Objects, texturas, pixeles y tamaños en arrays, para hacer todas las operaciones en el contexto de un bucle for.</span></p>
<pre style="font-size: .8em;">// declaración
OfFbo		fbo[6];
ofPixels    pix[6];
ofTexture	texture[6];
int         w[6];
int         h[6];

...

// asignacion de memoria
for (int i=0; i&lt;6; i++) {
	fbo[i].allocate(w[i], h[i], GL_RGB, 0);
	texture[i].allocate(w[i], h[i], GL_RGB);
	texture[i].setTextureMinMagFilter(GL_NEAREST, GL_NEAREST);
}

...

for (int i=0; i&lt;6; i++) {
  	fbo[i].begin();
	ofClear(0, 0, 0, 255);
	videoTexture.draw(0,0, w[i]-2, h[i]);
	fbo[i].end();
	fbo[i].readToPixels(pix[i]);
	texture[i].loadData(Pix[i].getPixels(), w[i], h[i], GL_RGB);
}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Una vez hayamos almacenado cada uno de los niveles de la alfombra en una textura diferente solamente nos quedará el delicado trabajo de mostrarlas unas encima de otras de modo que únicamente sean visibles los cuadrados centrales.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/01-mago-composit.png"><img decoding="async" class="alignnone wp-image-1148 size-large" src="./../../../wp-content/uploads/2015/02/01-mago-composit-1024x686.png" alt="01-mago-composit" width="1024" height="686" srcset="./../../../wp-content/uploads/2015/02/01-mago-composit-1024x686.png 1024w, ./../../../wp-content/uploads/2015/02/01-mago-composit-300x201.png 300w, ./../../../wp-content/uploads/2015/02/01-mago-composit.png 1132w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Recurramos a la misma lógica que seguimos en el artículo anterior. En el primer nivel el cuadrado central corresponde a un pixel cuyas coordenadas X e Y en la matriz de 3 x 3 son 1 y 1. En el segundo nivel tenemos una matriz de 9 x 9, con ocho zonas de 3 x 3 pixeles dentro de las cuales debemos seleccionar un cuadrado central que, a su vez, corresponde a un pixel cuyas coordenadas X e Y son, otra vez, 1 y 1. Al margen de la posición en la que esté cada pixel central, el resto de la división entera de sus coordenadas de entre 3 será siempre 1, ya que se tratará del segundo pixel de un grupo de tres pixeles, el número 1 contando a partir del 0.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski-shaders_04.png"><img decoding="async" class="alignnone wp-image-1149 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski-shaders_04.png" alt="sierpinski-shaders_04" width="720" height="213" srcset="./../../../wp-content/uploads/2015/02/sierpinski-shaders_04.png 720w, ./../../../wp-content/uploads/2015/02/sierpinski-shaders_04-300x88.png 300w" sizes="(max-width: 720px) 100vw, 720px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">En todos y cada uno de los niveles sucede exactamente lo mismo, el cuadrado central se corresponde con el segundo pixel de un grupo de tres, por lo tanto, podemos utilizar un shader para cambiar la transparencia de todos los pixeles de las texturas que hemos creado en función de sus coordenadas y hacer visibles solamente los cuadrados centrales. Bastará con asignar 0 al valor del canal alpha de cada pixel, cuando el resto de la división entera de sus coordenadas entre tres no sea 1 en ambos ejes.</span></p>
<pre style="font-size: .8em;">uniform sampler2DRect tex0;
in vec2 texCoordVarying;

out vec4 outputColor;

void main() {
	 
	vec4 texel0 = texture(tex0, texCoordVarying);
	float alpha = 1.0;
	((floor(mod(texCoordVarying.x, 3)) == 1) &amp;&amp; (floor(mod(texCoordVarying.y, 3)) == 1)) ? alpha = 1.0 : alpha = 0.0;
	if ((texel0.r == 0) &amp;&amp; (texel0.g == 0) &amp;&amp; (texel0.b == 0)) alpha = 0.0;
	outputColor = vec4(texel0.r, texel0.g, texel0.b, alpha);
	
}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Hemos utilizado esta estrategia para hacer una segunda aplicación y el resultado es asombroso, el nuevo programa permite dibujar un Sierpinski a partir del feedback de la webcam el doble de grande, 1458 x 729, y sin embargo funciona a 50 fotogramas por segundo.</span></p>
<p><a title="Sierpinski Shaders - Github Alg-a" href="https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiShaders">https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiShaders</a></p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../dibujando-la-alfombra-de-sierpinski-shaders-y-fbo/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Dibujando la alfombra de Sierpinski con pixeles</title>
		<link>./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/index.html</link>
					<comments>./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/index.html#respond</comments>
		
		<dc:creator><![CDATA[Horacio]]></dc:creator>
		<pubDate>Sat, 07 Feb 2015 22:10:00 +0000</pubDate>
				<category><![CDATA[Alfombra de Sierpinski]]></category>
		<category><![CDATA[code]]></category>
		<category><![CDATA[Investigación]]></category>
		<category><![CDATA[Máquina Abstracta]]></category>
		<category><![CDATA[OpenFrameworks]]></category>
		<category><![CDATA[Tech]]></category>
		<category><![CDATA[3]]></category>
		<category><![CDATA[cálculo coordenadas]]></category>
		<category><![CDATA[fundamentos]]></category>
		<category><![CDATA[iteración]]></category>
		<category><![CDATA[módulo]]></category>
		<category><![CDATA[pixeles]]></category>
		<category><![CDATA[posición]]></category>
		<category><![CDATA[sierpinski]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1109</guid>

					<description><![CDATA[Hagamos el ejercicio de intentar llevar la lógica del conjunto fractal de la alfombra de Sierpinski al nivel del pixel. Para hacerlo necesitaremos trabajar con imágenes cuyas dimensiones sean potencia de 3, de modo que podamos ir dividiendo sucesivamente el ancho y el alto de la imagen en tres partes iguales, hasta llegar a un [...]]]></description>
										<content:encoded><![CDATA[<p><a href="./../../../wp-content/uploads/2015/02/self_portrait_sierpinski.png"><img decoding="async" class="alignnone wp-image-1110 size-full" src="./../../../wp-content/uploads/2015/02/self_portrait_sierpinski.png" alt="self_portrait_sierpinski" width="1458" height="729" srcset="./../../../wp-content/uploads/2015/02/self_portrait_sierpinski.png 1458w, ./../../../wp-content/uploads/2015/02/self_portrait_sierpinski-300x150.png 300w, ./../../../wp-content/uploads/2015/02/self_portrait_sierpinski-1024x511.png 1024w, ./../../../wp-content/uploads/2015/02/self_portrait_sierpinski-1000x500.png 1000w" sizes="(max-width: 1458px) 100vw, 1458px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Hagamos el ejercicio de intentar llevar la lógica del conjunto fractal de la alfombra de Sierpinski al nivel del pixel. Para hacerlo necesitaremos trabajar con imágenes cuyas dimensiones sean potencia de 3, de modo que podamos ir dividiendo sucesivamente el ancho y el alto de la imagen en tres partes iguales, hasta llegar a un fragmento de 1 x 1 pixel.</span></p>
<pre style="font-size: .8em;">1, 3, 9, 27, 81, 243, 729 ...</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Usemos una imagen de 729 x 729 pixeles para dibujar un Sierpinski de 6 niveles. ¿Cómo podemos saber que pixeles corresponden al cuadrado central de 243 x 243 cuando recorremos la matriz?<br />
</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_00.png"><img decoding="async" class="alignnone wp-image-1112 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_00.png" alt="sierpinski_00" width="904" height="770" srcset="./../../../wp-content/uploads/2015/02/sierpinski_00.png 904w, ./../../../wp-content/uploads/2015/02/sierpinski_00-300x255.png 300w" sizes="(max-width: 904px) 100vw, 904px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Lo primero que necesitaremos es conocer las coordenadas X e Y de cada pixel en función de su índice, para lo que utilizaremos el sistema de cálculo que propusimos en el <a title="Contando pixeles" href="./../../../contando-pixeles/index.html">artículo 01</a>. También es importante recordar que multiplicaremos todas las medidas por 3 ya que, para cada pixel, en realidad hay tres valores almacenados en la matriz, R, G y B.</span></p>
<pre style="font-size: .8em;">for (int i=0; i&lt;totalPixels; i++) {

	int x = i % (width * 3);
	int y = (i - x) / (width * 3);

	// do something with x and y  …

}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Como el ancho de nuestra imagen es de 729 pixeles, los pixeles del extremo izquierdo empiezan en la coordenada X = 0 y los del extremo derecho acaban en la coordenada X = 728. Por lo tanto, si dividimos la coordenada X de cualquiera de los pixeles entre 243 siempre obtendremos un valor entre 0 y 2,996, que será inferior a 1 cuando se trate de pixeles de la zona anterior al cuadrado central, estará entre 1 y 2 cuando se trate de pixeles de la zona central y será igual o superior a 2 cuando se trate de pixeles de la zona posterior.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_03.png"><img decoding="async" class="alignnone wp-image-1113 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_03.png" alt="sierpinski_03" width="1036" height="184" srcset="./../../../wp-content/uploads/2015/02/sierpinski_03.png 1036w, ./../../../wp-content/uploads/2015/02/sierpinski_03-300x53.png 300w, ./../../../wp-content/uploads/2015/02/sierpinski_03-1024x181.png 1024w" sizes="(max-width: 1036px) 100vw, 1036px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Si queremos obtener un número entero al dividir y evitar trabajar con decimales, podemos calcular el resto de la división entera y restarlo previamente, utilizando el operador módulo. Así obtendremos un valor igual a 0 para todos los pixeles de la zona anterior al cuadrado, </span><span style="color: #4c4c4c;">igual a 1 para todos los pixeles del cuadrado central e igual a 2 para todos los pixeles de la zona posterior.</span></p>
<pre style="font-size: .8em;">	int resto_x = x % (243 * 3);
	int zona_x  = (x - resto_x) / (243 * 3);</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Realizando el mismo cálculo en el eje Y, podemos establecer que todos aquellos pixeles en los que obtengamos 1 y 1 como resultados, están situados en el cuadrado central de la imagen.<br />
</span></p>
<pre style="font-size: .8em;">for (int i=0; i&lt;totalPixels; i++) {

	int x = i % (width * 3);
	int y = (i - x) / (width * 3);

	int resto_x = x % (243 * 3);
	int resultado_x  = (x - resto_x) / (243 * 3);
	int resto_y = y % (243 * 3);
	int resultado_y  = (y - resto_y) / (243 * 3);

	if ((resultado_x == 1)&amp;&amp;(resultado_y == 1)) {
		// do something with pixels[i]  ...
	}

}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Una vez sabemos qué pixeles están en el cuadrado central del primer nivel, intentemos averiguar cuales de los pixeles que no están en dicho cuadrado, están en los cuadrados centrales de de las 8 áreas que quedan definidas a su alrededor. Cada una de estas nuevas zonas tiene un tamaño de 243 x 243 pixeles y, a su vez, sus cuadrados centrales miden 81 x 81 pixeles. ¿Como podemos averiguar las coordenadas X e Y de cada pixel dentro de este nuevo marco de referencia?</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_01.png"><img decoding="async" class="alignnone wp-image-1115 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_01.png" alt="sierpinski_01" width="862" height="756" srcset="./../../../wp-content/uploads/2015/02/sierpinski_01.png 862w, ./../../../wp-content/uploads/2015/02/sierpinski_01-300x263.png 300w" sizes="(max-width: 862px) 100vw, 862px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Reflexionemos un poco, ¡en realidad ya las conocemos! Los restos de la división entera, que calculamos con el operador módulo, nos indican dichas coordenadas ya que equivalen al número de pixeles que hemos recorrido desde que sobrepasamos la zona anterior a aquella en la que estamos.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_04.png"><img decoding="async" class="alignnone wp-image-1116 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_04.png" alt="sierpinski_04" width="1036" height="184" srcset="./../../../wp-content/uploads/2015/02/sierpinski_04.png 1036w, ./../../../wp-content/uploads/2015/02/sierpinski_04-300x53.png 300w, ./../../../wp-content/uploads/2015/02/sierpinski_04-1024x181.png 1024w" sizes="(max-width: 1036px) 100vw, 1036px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Saber que pixeles están en los nuevos cuadrados centrales, en realidad, es un problema que ya hemos resuelto con una matriz de diferentes dimensiones. Solamente tenemos que aplicar la misma lógica que en el primer nivel, considerando que ahora tenemos una matriz de 243 x 243 con un cuadrado central de 81 x 81 pixeles.</span></p>
<pre style="font-size: .8em;">	if ((resultado_x == 1)&amp;&amp;(resultado_y == 1)) {
		// do something with pixels[i]  ...
	} else {
		int x1 = resto_x;
		int y1 = resto_y;
		
		int resto_x1 = x1 % (81 * 3);
		int resultado_x1  = (x1 - resto_x1) / (81 * 3);
		int resto_y1 = y1 % (81 * 3);
		int resultado_y1  = (y1 - resto_y1) / (81 * 3);

		if ((resultado_x1 == 1)&amp;&amp;(resultado_y1 == 1)) {
			// do something with pixels[i]  ...
		}
	}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Aplicando el mismo sistema podemos proseguir sucesivamente con cuadrados cada vez más pequeños, de 27 x 27, de 9 x 9 y, finalmente de 3 x 3, el último nivel al que podemos llegar trabajando con pixeles.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_02.png"><img decoding="async" class="alignnone wp-image-1118 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_02.png" alt="sierpinski_02" width="744" height="732" srcset="./../../../wp-content/uploads/2015/02/sierpinski_02.png 744w, ./../../../wp-content/uploads/2015/02/sierpinski_02-300x295.png 300w" sizes="(max-width: 744px) 100vw, 744px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">En la siguiente aplicación encontrareis un ejemplo de como hemos combinado el concepto de áreas de activación, descrito en el <a title="Areas de activacion" href="./../../../el-mago-areas-de-activacion/index.html">articulo 00</a>, con la alfombra de Sierpinski, para definir una retícula de zonas sensibles, activables y desactivables, con la que interactuar a través de una web cam.</span></p>
<p><a title="SierpinskiGreyScale - Github Alg-a" href="https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiGreyScale" target="_blank">https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiGreyScale</a></p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
