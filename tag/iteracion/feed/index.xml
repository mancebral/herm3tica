<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>iteración &#8211; herm3TICa</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Cámaras, sensores y telepresencia</description>
	<lastBuildDate>Sun, 08 Feb 2015 12:11:43 +0000</lastBuildDate>
	<language>es</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Dibujando la alfombra de Sierpinski con pixeles</title>
		<link>./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/index.html</link>
					<comments>./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/index.html#respond</comments>
		
		<dc:creator><![CDATA[Horacio]]></dc:creator>
		<pubDate>Sat, 07 Feb 2015 22:10:00 +0000</pubDate>
				<category><![CDATA[Alfombra de Sierpinski]]></category>
		<category><![CDATA[code]]></category>
		<category><![CDATA[Investigación]]></category>
		<category><![CDATA[Máquina Abstracta]]></category>
		<category><![CDATA[OpenFrameworks]]></category>
		<category><![CDATA[Tech]]></category>
		<category><![CDATA[3]]></category>
		<category><![CDATA[cálculo coordenadas]]></category>
		<category><![CDATA[fundamentos]]></category>
		<category><![CDATA[iteración]]></category>
		<category><![CDATA[módulo]]></category>
		<category><![CDATA[pixeles]]></category>
		<category><![CDATA[posición]]></category>
		<category><![CDATA[sierpinski]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1109</guid>

					<description><![CDATA[Hagamos el ejercicio de intentar llevar la lógica del conjunto fractal de la alfombra de Sierpinski al nivel del pixel. Para hacerlo necesitaremos trabajar con imágenes cuyas dimensiones sean potencia de 3, de modo que podamos ir dividiendo sucesivamente el ancho y el alto de la imagen en tres partes iguales, hasta llegar a un [...]]]></description>
										<content:encoded><![CDATA[<p><a href="./../../../wp-content/uploads/2015/02/self_portrait_sierpinski.png"><img decoding="async" class="alignnone wp-image-1110 size-full" src="./../../../wp-content/uploads/2015/02/self_portrait_sierpinski.png" alt="self_portrait_sierpinski" width="1458" height="729" srcset="./../../../wp-content/uploads/2015/02/self_portrait_sierpinski.png 1458w, ./../../../wp-content/uploads/2015/02/self_portrait_sierpinski-300x150.png 300w, ./../../../wp-content/uploads/2015/02/self_portrait_sierpinski-1024x511.png 1024w, ./../../../wp-content/uploads/2015/02/self_portrait_sierpinski-1000x500.png 1000w" sizes="(max-width: 1458px) 100vw, 1458px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Hagamos el ejercicio de intentar llevar la lógica del conjunto fractal de la alfombra de Sierpinski al nivel del pixel. Para hacerlo necesitaremos trabajar con imágenes cuyas dimensiones sean potencia de 3, de modo que podamos ir dividiendo sucesivamente el ancho y el alto de la imagen en tres partes iguales, hasta llegar a un fragmento de 1 x 1 pixel.</span></p>
<pre style="font-size: .8em;">1, 3, 9, 27, 81, 243, 729 ...</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Usemos una imagen de 729 x 729 pixeles para dibujar un Sierpinski de 6 niveles. ¿Cómo podemos saber que pixeles corresponden al cuadrado central de 243 x 243 cuando recorremos la matriz?<br />
</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_00.png"><img decoding="async" class="alignnone wp-image-1112 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_00.png" alt="sierpinski_00" width="904" height="770" srcset="./../../../wp-content/uploads/2015/02/sierpinski_00.png 904w, ./../../../wp-content/uploads/2015/02/sierpinski_00-300x255.png 300w" sizes="(max-width: 904px) 100vw, 904px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Lo primero que necesitaremos es conocer las coordenadas X e Y de cada pixel en función de su índice, para lo que utilizaremos el sistema de cálculo que propusimos en el <a title="Contando pixeles" href="./../../../contando-pixeles/index.html">artículo 01</a>. También es importante recordar que multiplicaremos todas las medidas por 3 ya que, para cada pixel, en realidad hay tres valores almacenados en la matriz, R, G y B.</span></p>
<pre style="font-size: .8em;">for (int i=0; i&lt;totalPixels; i++) {

	int x = i % (width * 3);
	int y = (i - x) / (width * 3);

	// do something with x and y  …

}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Como el ancho de nuestra imagen es de 729 pixeles, los pixeles del extremo izquierdo empiezan en la coordenada X = 0 y los del extremo derecho acaban en la coordenada X = 728. Por lo tanto, si dividimos la coordenada X de cualquiera de los pixeles entre 243 siempre obtendremos un valor entre 0 y 2,996, que será inferior a 1 cuando se trate de pixeles de la zona anterior al cuadrado central, estará entre 1 y 2 cuando se trate de pixeles de la zona central y será igual o superior a 2 cuando se trate de pixeles de la zona posterior.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_03.png"><img decoding="async" class="alignnone wp-image-1113 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_03.png" alt="sierpinski_03" width="1036" height="184" srcset="./../../../wp-content/uploads/2015/02/sierpinski_03.png 1036w, ./../../../wp-content/uploads/2015/02/sierpinski_03-300x53.png 300w, ./../../../wp-content/uploads/2015/02/sierpinski_03-1024x181.png 1024w" sizes="(max-width: 1036px) 100vw, 1036px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Si queremos obtener un número entero al dividir y evitar trabajar con decimales, podemos calcular el resto de la división entera y restarlo previamente, utilizando el operador módulo. Así obtendremos un valor igual a 0 para todos los pixeles de la zona anterior al cuadrado, </span><span style="color: #4c4c4c;">igual a 1 para todos los pixeles del cuadrado central e igual a 2 para todos los pixeles de la zona posterior.</span></p>
<pre style="font-size: .8em;">	int resto_x = x % (243 * 3);
	int zona_x  = (x - resto_x) / (243 * 3);</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Realizando el mismo cálculo en el eje Y, podemos establecer que todos aquellos pixeles en los que obtengamos 1 y 1 como resultados, están situados en el cuadrado central de la imagen.<br />
</span></p>
<pre style="font-size: .8em;">for (int i=0; i&lt;totalPixels; i++) {

	int x = i % (width * 3);
	int y = (i - x) / (width * 3);

	int resto_x = x % (243 * 3);
	int resultado_x  = (x - resto_x) / (243 * 3);
	int resto_y = y % (243 * 3);
	int resultado_y  = (y - resto_y) / (243 * 3);

	if ((resultado_x == 1)&amp;&amp;(resultado_y == 1)) {
		// do something with pixels[i]  ...
	}

}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Una vez sabemos qué pixeles están en el cuadrado central del primer nivel, intentemos averiguar cuales de los pixeles que no están en dicho cuadrado, están en los cuadrados centrales de de las 8 áreas que quedan definidas a su alrededor. Cada una de estas nuevas zonas tiene un tamaño de 243 x 243 pixeles y, a su vez, sus cuadrados centrales miden 81 x 81 pixeles. ¿Como podemos averiguar las coordenadas X e Y de cada pixel dentro de este nuevo marco de referencia?</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_01.png"><img decoding="async" class="alignnone wp-image-1115 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_01.png" alt="sierpinski_01" width="862" height="756" srcset="./../../../wp-content/uploads/2015/02/sierpinski_01.png 862w, ./../../../wp-content/uploads/2015/02/sierpinski_01-300x263.png 300w" sizes="(max-width: 862px) 100vw, 862px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Reflexionemos un poco, ¡en realidad ya las conocemos! Los restos de la división entera, que calculamos con el operador módulo, nos indican dichas coordenadas ya que equivalen al número de pixeles que hemos recorrido desde que sobrepasamos la zona anterior a aquella en la que estamos.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_04.png"><img decoding="async" class="alignnone wp-image-1116 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_04.png" alt="sierpinski_04" width="1036" height="184" srcset="./../../../wp-content/uploads/2015/02/sierpinski_04.png 1036w, ./../../../wp-content/uploads/2015/02/sierpinski_04-300x53.png 300w, ./../../../wp-content/uploads/2015/02/sierpinski_04-1024x181.png 1024w" sizes="(max-width: 1036px) 100vw, 1036px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Saber que pixeles están en los nuevos cuadrados centrales, en realidad, es un problema que ya hemos resuelto con una matriz de diferentes dimensiones. Solamente tenemos que aplicar la misma lógica que en el primer nivel, considerando que ahora tenemos una matriz de 243 x 243 con un cuadrado central de 81 x 81 pixeles.</span></p>
<pre style="font-size: .8em;">	if ((resultado_x == 1)&amp;&amp;(resultado_y == 1)) {
		// do something with pixels[i]  ...
	} else {
		int x1 = resto_x;
		int y1 = resto_y;
		
		int resto_x1 = x1 % (81 * 3);
		int resultado_x1  = (x1 - resto_x1) / (81 * 3);
		int resto_y1 = y1 % (81 * 3);
		int resultado_y1  = (y1 - resto_y1) / (81 * 3);

		if ((resultado_x1 == 1)&amp;&amp;(resultado_y1 == 1)) {
			// do something with pixels[i]  ...
		}
	}</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Aplicando el mismo sistema podemos proseguir sucesivamente con cuadrados cada vez más pequeños, de 27 x 27, de 9 x 9 y, finalmente de 3 x 3, el último nivel al que podemos llegar trabajando con pixeles.</span></p>
<p><a href="./../../../wp-content/uploads/2015/02/sierpinski_02.png"><img decoding="async" class="alignnone wp-image-1118 size-full" src="./../../../wp-content/uploads/2015/02/sierpinski_02.png" alt="sierpinski_02" width="744" height="732" srcset="./../../../wp-content/uploads/2015/02/sierpinski_02.png 744w, ./../../../wp-content/uploads/2015/02/sierpinski_02-300x295.png 300w" sizes="(max-width: 744px) 100vw, 744px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">En la siguiente aplicación encontrareis un ejemplo de como hemos combinado el concepto de áreas de activación, descrito en el <a title="Areas de activacion" href="./../../../el-mago-areas-de-activacion/index.html">articulo 00</a>, con la alfombra de Sierpinski, para definir una retícula de zonas sensibles, activables y desactivables, con la que interactuar a través de una web cam.</span></p>
<p><a title="SierpinskiGreyScale - Github Alg-a" href="https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiGreyScale" target="_blank">https://github.com/alg-a/herm3TICa/tree/master/exploracion%20pruebas%20y%20juegos/SierpinskiGreyScale</a></p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../dibujando-la-alfombra-de-sierpinski-con-pixeles/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Contando pixeles.</title>
		<link>./../../../contando-pixeles/index.html</link>
		
		<dc:creator><![CDATA[Horacio]]></dc:creator>
		<pubDate>Sun, 11 Jan 2015 17:42:52 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[Investigación]]></category>
		<category><![CDATA[Máquina Abstracta]]></category>
		<category><![CDATA[OpenFrameworks]]></category>
		<category><![CDATA[Tech]]></category>
		<category><![CDATA[bucles]]></category>
		<category><![CDATA[fundamentos]]></category>
		<category><![CDATA[iteración]]></category>
		<category><![CDATA[pixeles]]></category>
		<guid isPermaLink="false">./../../../index.html?p=819</guid>

					<description><![CDATA[Una de las tareas que realizaremos a menudo cuando trabajemos con video en openframeworks será recorrer la matriz de pixeles en la que se almacena cada fotograma procedente de la cámara o de la película que estemos reproduciendo. En openframeworks, dicha matriz no es bidimensional, sino que los valores RGB se almacenan, unos al lado [...]]]></description>
										<content:encoded><![CDATA[<p style="text-align: justify;"><span style="color: #4c4c4c;">Una de las tareas que realizaremos a menudo cuando trabajemos con video en openframeworks será recorrer la matriz de pixeles en la que se almacena cada fotograma procedente de la cámara o de la película que estemos reproduciendo. En openframeworks, dicha matriz no es bidimensional, sino que los valores RGB se almacenan, unos al lado de los otros, en una larga lista.</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/carta-mago-00.png"><img decoding="async" class="alignnone wp-image-822 size-large" src="./../../../wp-content/uploads/2015/01/carta-mago-00-1024x62.png" alt="carta-mago-00" width="1024" height="62" srcset="./../../../wp-content/uploads/2015/01/carta-mago-00-1024x62.png 1024w, ./../../../wp-content/uploads/2015/01/carta-mago-00-300x18.png 300w, ./../../../wp-content/uploads/2015/01/carta-mago-00.png 1436w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Es importante recordar que, por cada pixel, en la lista se almacenan tres valores; uno para la luminosidad del color rojo, otro para la luminosidad del color verde, y otro para la luminosidad del color azul. Por lo tanto, cualquier matriz de pixeles que utilicemos procedente de una imagen RGB estará compuesta por un numero valores igual al total de pixeles multiplicado por 3.</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/carta-mago-01.png"><img decoding="async" class="alignnone wp-image-823 size-large" src="./../../../wp-content/uploads/2015/01/carta-mago-01-1024x62.png" alt="carta-mago-01" width="1024" height="62" srcset="./../../../wp-content/uploads/2015/01/carta-mago-01-1024x62.png 1024w, ./../../../wp-content/uploads/2015/01/carta-mago-01-300x18.png 300w, ./../../../wp-content/uploads/2015/01/carta-mago-01.png 1436w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Para recorrer la matriz y realizar operaciones en cada uno de los pixeles basta con hacer una, muy sencilla, iteración con un índice que nos permita ir del primer elemento de la lista hasta el último.</span></p>
<pre style="font-size: .8em;">unsigned char * pixels = vidGrabber.getPixels();
int totalPixels = camWidth * camHeight * 3;
for (int i = 0; i &lt; totalPixels; i++) {
	// do something with pixels[i]  ...
}
</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Sin embargo, en muchas ocasiones, será necesario conocer la posición X e Y da cada pixel en la imagen, como por ejemplo, cuando queramos cambiar su tamaño, trabajar en un fragmento de la misma o hacer operaciones basadas en líneas horizontales o verticales. En ese caso la solución mas directa consiste en trabajar como si la matriz de vídeo tuviese dos dimensiones y hacer dos iteraciones, con dos índices, uno que recorra la matriz a lo alto y otro que la recorra a lo ancho. De este modo, avanzaremos a través de la imagen, de línea horizontal en línea horizontal, empezando por la parte superior izquierda y acabando en la parte inferior derecha y, en cada punto de la iteración, los índices tomarán el valor de la posición X e Y de uno de los pixeles; con ellos, podremos calcular fácilmente la posición de dicho pixel en la lista.</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/lectura_pixeles_00.png"><img decoding="async" class="alignnone wp-image-830 size-large" src="./../../../wp-content/uploads/2015/01/lectura_pixeles_00-626x1024.png" alt="lectura_pixeles_00" width="626" height="1024" srcset="./../../../wp-content/uploads/2015/01/lectura_pixeles_00-626x1024.png 626w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_00-183x300.png 183w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_00.png 734w" sizes="(max-width: 626px) 100vw, 626px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Al igual que en el ejemplo anterior es importante recordar que por cada pixel se almacenan tres valores en la lista, por lo que el ancho de de una matriz de dos dimensiones en la que estuviese almacenada la imagen sería tres veces el ancho en pixeles de la imagen.</span></p>
<pre style="font-size: .8em;">unsigned char * pixels = vidGrabber.getPixels();
for (int y=0; y&lt;camHeight; y++) {
	for (int x = 0; x &lt; (camWidth * 3); x++){
		int position = y * (camWidth * 3) + x;
		// do something with pixels[pos]  ...
	}
}
</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Siguiendo la misma estrategia, en uno de los <a href="http://forum.openframeworks.cc/t/nested-iteration-over-all-pixels-of-ofxcvgrayscaleimage/14039">foros de openframeworks</a>, Arturo Castro propone simplificar el proceso utilizando un tercer índice para calcular de forma directa la posición en la lista.</span></p>
<pre style="font-size: .8em;">unsigned char * pixels = vidGrabber.getPixels();
int i = 0;
for (int y=0; y&lt;camHeight; y++) {
	for (int x = 0; x &lt; (camWidth * 3); x++, i++){
		// do something with pixels[i]  ...
	}
}
</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">La opción propuesta por Arturo Castro es extraordinariamente elegante, pero en los ejemplos de herm3TICa, a menudo, utilizaremos una estrategia diferente sugerida por Emanuele Mazza, que permite reducir el número de iteraciones haciendo algunas matemáticas. Consiste en utilizar un operador llamado módulo <em>%</em>, que devuelve el resto de una división con números enteros, para calcular la posición X e Y de cada pixel partiendo de su índice.</span></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Si recorremos la matriz a través de un único índice, como en el primer ejemplo, y en cada iteración calculamos el resto de la división de dicho índice entre el ancho de la matriz utilizando el operador módulo, el resto equivaldrá la posición X de cada pixel. Del mismo modo si calculamos la división con números enteros del índice entre el ancho de la matriz, restando previamente ese resto al índice, el resultado equivaldrá la posición Y de cada pixel. </span></p>
<pre style="font-size: .8em;">unsigned char * pixels = vidGrabber.getPixels();
int totalPixels = camWidth * camHeight * 3;
for (int i=0; i&lt;totalPixels; i++) {
	int x = i % (camWidth * 3);
	int y = (i - x) / (camWidth * 3);
	// do something with pixels[i]  ...
}
</pre>
<p style="text-align: justify;"><span style="color: #4c4c4c;">La lógica de la operación es mucho mas sencilla de lo que aparenta; por cada línea que recorremos, avanzamos un total de valores igual al ancho de la supuesta matriz bidimensional. </span></p>
<p><a href="./../../../wp-content/uploads/2015/01/lectura_pixeles_01.png"><img decoding="async" class="alignnone wp-image-825 size-large" src="./../../../wp-content/uploads/2015/01/lectura_pixeles_01-1024x75.png" alt="lectura_pixeles_01" width="1024" height="75" srcset="./../../../wp-content/uploads/2015/01/lectura_pixeles_01-1024x75.png 1024w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_01-300x22.png 300w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_01.png 1458w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;"><span style="color: #4c4c4c;">Si, por ejemplo, estamos al principio de la tercera línea, habremos avanzado dos veces el ancho de la matriz y el resultado de la división del índice entre el ancho matriz deberá ser dos. Sin embargo nos encontramos en la tercera línea, ¿por que? En realidad la tercera línea es la número dos ya que, al igual que en el Tarot, comenzamos a contar a partir del 0, es decir, contamos las líneas que hemos recorrido, no la línea en la que estamos. La primera línea, la línea 0, es la línea en la que todavía no hemos recorrido ninguna otra línea</span>.</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/lectura_pixeles_02.png"><img decoding="async" class="alignnone wp-image-826 size-large" src="./../../../wp-content/uploads/2015/01/lectura_pixeles_02-1024x75.png" alt="lectura_pixeles_02" width="1024" height="75" srcset="./../../../wp-content/uploads/2015/01/lectura_pixeles_02-1024x75.png 1024w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_02-300x22.png 300w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_02.png 1458w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">En el ejemplo de la imagen si dividimos el índice, 14, entre 7 el resultado es 2 y el resto cero, por lo que el índice 14 se encuentra la posición 0 de la segunda línea.</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/lectura_pixeles_04.png"><img decoding="async" class="alignnone wp-image-828 size-large" src="./../../../wp-content/uploads/2015/01/lectura_pixeles_04-626x1024.png" alt="lectura_pixeles_04" width="626" height="1024" srcset="./../../../wp-content/uploads/2015/01/lectura_pixeles_04-626x1024.png 626w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_04-183x300.png 183w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_04.png 734w" sizes="(max-width: 626px) 100vw, 626px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;">Por el contrario, si la división del índice entre el ancho de la matriz no es exacta, quiere decir que todavía no hemos alcanzado el final de una de las líneas. En ese caso el valor entero de la división corresponde al número de líneas que ya hemos avanzado y el resto el lugar por el que vamos en la línea que no hemos acabado.<br />
</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/lectura_pixeles_03.png"><img decoding="async" class="alignnone wp-image-827 size-large" src="./../../../wp-content/uploads/2015/01/lectura_pixeles_03-1024x75.png" alt="lectura_pixeles_03" width="1024" height="75" srcset="./../../../wp-content/uploads/2015/01/lectura_pixeles_03-1024x75.png 1024w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_03-300x22.png 300w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_03.png 1458w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p style="text-align: justify;"><span style="color: #4c4c4c;"><span style="color: #4c4c4c;">En el ejemplo de la imagen si dividimos el índice, 8, entre 7 </span>el resultado es 1 y el resto 1, por lo que el índice 8 se encuentra en la segunda posición de la segunda línea.</span></p>
<p><a href="./../../../wp-content/uploads/2015/01/lectura_pixeles_05.png"><img decoding="async" class="alignnone wp-image-829 size-large" src="./../../../wp-content/uploads/2015/01/lectura_pixeles_05-626x1024.png" alt="lectura_pixeles_05" width="626" height="1024" srcset="./../../../wp-content/uploads/2015/01/lectura_pixeles_05-626x1024.png 626w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_05-183x300.png 183w, ./../../../wp-content/uploads/2015/01/lectura_pixeles_05.png 734w" sizes="(max-width: 626px) 100vw, 626px" /></a></p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
